#!/usr/bin/env node

require('colorful').colorful();
require('gnode');

var program = require('commander');
var archy = require('archy');
var spmrc = require('spmrc');
var log = require('spm-log');
var exists = require('fs').existsSync;
var readJSON = require('fs-extra').readJSONSync;

program
  .option('-d, --depth <n>', 'set the depth to <n>', Infinity)
  .option('--no-color', 'disable colorful print')
  .parse(process.argv);

// color
log.config(program);

var cache = {};

var p = exists('package.json') && readJSON('package.json');
if (!p || !p.apm) {
  console.log();
  log.error('miss', 'package.json or "apm" key');
  process.exit(1);
}

var Package = require('father').SpmPackage;
var pkg = new Package(process.cwd(), {
  moduleDir: spmrc.get('install.path')
});

console.log();
var data = tree(pkg);
if (program.color) data = color(data);
console.log(indent(archy(data)));


function tree(pkg) {
  var deps = pkg.dependencies;
  var id = pkg.name + '@' + pkg.version;
  if (!deps) {
    return id;
  }

  var name = pkg.name;
  if (!cache[name]) {
    cache[name] = pkg.version;
  } else if (cache[name] !== pkg.version) {
    cache[name] = 'conflict';
  }

  var ret = {label:id, nodes:[]};
  for (var k in deps) {
    if (deps.hasOwnProperty(k)) {
      ret.nodes.push(tree(deps[k]));
    }
  }
  return ret;
}

function color(node) {
  if (node.nodes) {
    node.nodes = node.nodes.map(color);
  }
  if (node.label) {
    var bits = node.label.split('@');
    var title = bits[0];
    var version = bits[1];
    if (cache[title] === 'conflict') {
      node.label = title.to.yellow + ('@' + version).to.red;
      if (program.color === false) {
        node.label = '{' + title + '@' + version + '}';
      }
    } else {
      node.label = title.to.cyan + ('@' + version).to.grey;
    }
  }
  return node;
}

function indent(str) {
  return str.replace(/^/gm, '  ');
}
