#!/usr/bin/env node

var color = require('colorful').color;
require('gnode');

var fs = require('fs');
var path = require('path');
var program = require('commander');
var spmrc = require('spmrc');
var vfs = require('vinyl-fs');
var gulpTemplate = require('gulp-template');
var inquirer = require('inquirer');
var semver = require('semver');
var emptyDir = require('empty-dir').sync;

var NAME_REGEX = require('spm-client').util.NAME_REGEX;

/*
  template directory
*/
var homeDir = process.env.HOME || process.env.USERPROFILE;

if (!homeDir) {
  homeDir = process.env.HOMEDRIVE + process.env.HOMEPATH;
}

var template = path.dirname(__dirname) + '/lib/template/';

template = template.replace(/^~/, homeDir);

/*
  program init
*/


program
  .option('-p, --package','Just add a package.json into your project.')
  .on('--help', function(){
    console.log('  ' + 'Examples:');
    console.log('  $', 'apm init           Initialize a package');
    console.log('  $', 'apm init -p        Add a package.json into your project');
    console.log('');
  })
  .parse(process.argv);


if (!emptyDir(process.cwd()) && !program.package) {
  console.warn(color.yellow('Existing files here, please run init command in an empty folder!'));
  return;
}

console.log('Creating a apm package: ');
inquirer.prompt([{
  message: 'Package name',
  name: 'name',
  default: path.basename(process.cwd()),
  validate: function(input) {
    var done = this.async();
    if (!NAME_REGEX.test(input)) {
      console.warn(color.red('Must be only lowercase letters, numbers, dashes or dots, and start with lowercase letter.'));
      return;
    }
    done(true);
  }
}, {
  message: 'Version',
  name: 'version',
  default: '1.0.0',
  validate: function(input) {
    var done = this.async();
    if (!semver.valid(input)) {
      console.warn(color.red('Must be a valid semantic version (semver.org).'));
      return;
    }
    done(true);
  }
}, {
  message: 'Description',
  name: 'description'
}, {
  message: 'Author',
  name: 'author',
  default: require('whoami')
}], function( answers ) {
  answers.varName = answers.name.replace(/\-(\w)/g, function(all, letter){
    return letter.toUpperCase();
  });
  answers.yuanUrl = spmrc.get('registry');

  if (program.package) {
    vfs.src(path.join(template,'package.json'))
      .pipe(gulpTemplate(answers))
      .pipe(vfs.dest('./'))
      .on('end', function(){
        console.log(color.green('Initialize a package.json Succeccfully!'));
      });
    return
  }
  vfs.src(path.join(template, '**'), { dot: true })
    .pipe(gulpTemplate(answers))
    .pipe(vfs.dest('./'))
    .on('end', function() {
      // https://github.com/npm/npm/issues/1862
      fs.renameSync('./gitignore', './.gitignore');
      fs.renameSync('./apmignore', './.apmignore');
      fs.renameSync('./travis.yml', './.travis.yml');

      console.log();
      console.log(color.green('Initialize a apm package Succeccfully!'));
      console.log();
    });

});
